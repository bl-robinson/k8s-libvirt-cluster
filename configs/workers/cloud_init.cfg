#cloud-config
# vim: syntax=yaml
#
# ***********************
# 	---- for more examples look at: ------
# ---> https://cloudinit.readthedocs.io/en/latest/topics/examples.html
# ******************************
#
# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided.
#
# Note: Content strings here are truncated for example purposes.
growpart:
  mode: auto
  devices: ['/']

fqdn: k8s-worker-${count}
ssh_pwauth: True
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3STIAhGO45ksAputEJh/g7QtXljdRC+gF5kgtUjDpSOkNdgx9n6ciizXCm2VmZhGrBt2mqSekO21CCfu7VIq9nK7/TQ2PowyYtzFzfzUpts5S5RPBoUKgbdShoR2sIxi9dFblYBPv7XzHle8XzBZ7/zTEBj9fHAaQic/2rojzv6OGuPYzL480Ee2XgwTLcjoYw44PT751O+QiRyh2ONYrMA7hfZAODTht77LNXj39wBJdoE2wfKfkbntxc/jmewr7GrRqywz3HbDr33L7f4zEyCgepQ79UKd6IWUFpFf9FZ+/QQz/hoaGtA8ypcP3QdvoSJPxYCi8AvOP5h0EWvQl benr@wall-e
package_update: true
package_upgrade: true
packages:
  - sudo
  - apt-transport-https
  - ca-certificates
  - curl

write_files:
  - content: |-
        #!/bin/bash
        echo "INFO: Installing common ...."
        apt-get update && apt-get install -y  apt-transport-https ca-certificates curl gnupg2 software-properties-common nfs-common dnsutils
        echo "INFO: Common installed."

        echo "INFO: Mounting k8s share"
        echo '${nfs_server_ip}:/mnt/k8s /mnt/k8s nfs4 defaults 0 0' >> /etc/fstab
        mkdir /mnt/k8s
        mount /mnt/k8s

        echo "Doing k8s prereq..."
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        br_netfilter
        EOF

        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        EOF
        sudo sysctl --system

        sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release \
            containerd

        # Apply sysctl params without reboot
        sudo sysctl --system


        echo "INFO: Installing K8..."
        sudo mkdir -p -m 755 /etc/apt/keyrings
        sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list

        sudo apt-get update
        sudo apt-get install -y kubelet=1.30.0-1.1 kubeadm=1.30.0-1.1 kubectl=1.30.0-1.1
        sudo apt-mark hold kubelet kubeadm kubectl
        echo "INFO: Done Installing K8s"

        echo "INFO: Init Worker Node"
        echo "INFO: Waiting for files to exist"
        while [ ! -f /mnt/k8s/token ]; do sleep 1; done
        while [ ! -f /mnt/k8s/ca-cert-hash ]; do sleep 1; done

        echo "INFO: Join Cluster"
        kubeadm join --token "$(cat /mnt/k8s/token)" 10.0.0.20:6443 --discovery-token-ca-cert-hash sha256:"$(cat /mnt/k8s/ca-cert-hash)"
        touch /mnt/k8s/worker-complete-${count}
        echo "INFO: Check if we need to remove the join token"
        if [[ "$(ls /mnt/k8s | grep worker-complete | wc -l)" -eq ${worker_count} ]]
        then
            echo "INFO: Remove used k8s join token"
            rm /mnt/k8s/token
            rm /mnt/k8s/ca-cert-hash
            rm /mnt/k8s/worker-complete-*
        fi

    owner: debian:debian
    path: /home/debian/install_k8s.sh
    permissions: '0755'

runcmd:
  - bash /home/debian/install_k8s.sh
